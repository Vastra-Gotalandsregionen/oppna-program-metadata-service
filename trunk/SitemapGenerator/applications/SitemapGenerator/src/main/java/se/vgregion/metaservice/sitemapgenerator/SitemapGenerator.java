
package se.vgregion.metaservice.sitemapgenerator;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.List;
import java.util.Properties;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamException;
import javax.xml.stream.XMLStreamWriter;
import org.apache.log4j.Logger;
import se.vgregion.metaservice.vocabularyservice.intsvc.VocabularyService;
import se.vgregion.metaservice.vocabularyservice.intsvc.VocabularyServiceIntServiceImplService;
import v1.vocabularyservices.wsdl.metaservice.vgregion.se.GetVocabularyRequest;

/**
 * Generates a sitemap for the given Apelon namespace. The sitemap follows the
 * guidelines offered by http://www.sitemaps.org/protocol.php. The sitemap
 * will be stored on disk in a location configuered by services-config.xml.
 * <br><br>
 *
 * This class uses the soap-webbservice MetaService-Vocabularyservice to retrieve
 * information from the Apelon database system. 
 *
 * @author johan.sjoberg
 */
public class SitemapGenerator {
    private static Logger log = Logger.getLogger(SitemapGenerator.class);
    private static String propertiesFile = "sitemapgenerator.properties";
    private String requestId = null;
    private String sitemapLocation = null;
    private String sitePrefix = null;
    private VocabularyService service;

    public SitemapGenerator() {
        service = new VocabularyServiceIntServiceImplService().getVocabularyServiceIntServiceImplPort();
        loadProperties();
    }


    /**
     * Invoke main to start sitemap generation with the configuration as set in
     * classpath resource sitemapgenerator.properties. Any number of namespaces
     * can be given as a parameter, where a sitemap will be generated for each
     * namespace according to the style sitemap_<i>namespace</i>.xml
     *
     * @param args An array of namespaces to generate sitemaps for
     */
    public static void main(String[] args) {
        
        if (args != null && args.length > 0) {
            SitemapGenerator gen = new SitemapGenerator();

            for (String namespace : args) {
                gen.generateSitemapXml(namespace);
            }
        } else {
            System.out.println("Syntax error: Enter namespace(s) as parameter(s) to this routine.");
        }
        
    }

    
    /**
     * Generates the sitemap from the given namespace. The resulting XML is
     * exported to the filesystem location specified by the properties file
     * 'sitemapgenerator.properties'.
     *
     * @param namespace The Apelon namespace to export as a sitemap
     */
    public void generateSitemapXml(String namespace) {

        // Ensure properties are defined
        if (sitemapLocation == null || requestId == null || sitePrefix == null) {
            String prop;
            if (sitePrefix == null) prop = "sitemapgenerator.sitePrefix";
            else if (sitemapLocation == null) prop = "sitemapgenerator.sitemapLocation";
            else prop = "sitemapgenerator.requestId";
            log.error("'" + prop + "' property needs to be set in " + propertiesFile + ". Sitemap generation deferred.");
            return;
        }

        // Construct a webservice request
        GetVocabularyRequest request = new GetVocabularyRequest();
        request.setPath(namespace);
        request.setRequestId(requestId);

        List<v1.types.schema.metaservice.vgregion.se.NodeType> nodeList = service.getVocabulary(request).getNodeList().getNode();
        XMLOutputFactory factory = XMLOutputFactory.newInstance();
        XMLStreamWriter writer = null;
        OutputStream out = null;

        try {
            File sitemapFile = new File(sitemapLocation + File.separator + "sitemap_" + namespace + ".xml");
            if (!sitemapFile.exists()) {
                sitemapFile.createNewFile();
            }

            // create XML writer
            out = new FileOutputStream(sitemapFile.getAbsolutePath());
            writer = factory.createXMLStreamWriter(out, "utf-8");

            // Create the xml version string and root tags. Prefix and namespace
            // must be set to produce xmlns declaration in the root (urlset) tag
            writer.writeStartDocument();
            writer.writeComment("Sitemap generated by se.vgregion.metaservice.sitemapgenerator: " + new java.util.Date().toString());
            writer.setPrefix("", "http://www.sitemaps.org/schemas/sitemap/0.9");
            writer.writeStartElement("http://www.sitemaps.org/schemas/sitemap/0.9", "urlset");
            writer.writeNamespace("", "http://www.sitemaps.org/schemas/sitemap/0.9");

            // iterate Apelon nodes recursively and write XML to stream
            if (nodeList != null) {
                for (v1.types.schema.metaservice.vgregion.se.NodeType node : nodeList) {
                    traverseChildNodes(node, requestId, writer, namespace);
                }
            } else {
                log.info("No sitemap generated for '" + namespace + "', namespace is empty.");
            }

            writer.writeEndElement();
            writer.flush();
            writer.close();
            out.close();

            log.info("Successfully generated sitemap");
        } catch (FileNotFoundException ex) {
            log.error("Error generating sitemapXML:" + ex);

        } catch (XMLStreamException ex) {
            log.error("Error generating sitemapXML:" + ex);

        } catch (IOException ex) {
            log.error("Error generating sitemapXML:" + ex);
        } finally {
            try {
                if (writer != null) writer.close();
                if (out != null) out.close();
            } catch (Exception ex) {
                log.error(ex);
            }
        }

    }


    private void traverseChildNodes(v1.types.schema.metaservice.vgregion.se.NodeType node, String requestId, XMLStreamWriter writer, String path) throws XMLStreamException {
        writer.writeStartElement("url");
        
        writer.writeStartElement("loc");
        writer.writeCharacters(sitePrefix + "getdetail.do?getDetailId=" + node.getInternalId() + "&namespaceId=" + node.getNamespaceId());
        writer.writeEndElement();

        /*
        // This information does not exist in apelon (yet?)
        writer.writeStartElement("lastmod");
        writer.writeCharacters("lastmod");
        writer.writeEndElement();
        */

        writer.writeStartElement("changefreq");
        writer.writeCharacters("monthly");
        writer.writeEndElement();

        writer.writeStartElement("priority");
        writer.writeCharacters("0.5");
        writer.writeEndElement();

        writer.writeEndElement();

        // Prepare a new request to get child nodes
        String childpath = path + "/" + node.getName();
        GetVocabularyRequest request = new GetVocabularyRequest();
        request.setPath(childpath);
        request.setRequestId(requestId);
        List<v1.types.schema.metaservice.vgregion.se.NodeType> nodeList = service.getVocabulary(request).getNodeList().getNode();

        if (nodeList != null) {
            for (v1.types.schema.metaservice.vgregion.se.NodeType n : nodeList) {
                // Recusively call this routine for all children
                traverseChildNodes(n, requestId, writer, childpath);
            }
        }
    }


    /**
     * Loads the properties file required by this class from the classpath.
     */
    private void loadProperties() {
        InputStream in;
        in = this.getClass().getClassLoader().getResourceAsStream(propertiesFile);
        if (in != null) {
            Properties result = new Properties();
            try {
                result.load(in);
                sitemapLocation = result.getProperty("sitemapgenerator.sitemapLocation");
                requestId = result.getProperty("sitemapgenerator.requestId");
                sitePrefix = result.getProperty("sitemapgenerator.sitePrefix");
            } catch (IOException ex) {
                log.error("Unable to load configuration file '" + propertiesFile + "'", ex);
            }
        }
    }
    
}
